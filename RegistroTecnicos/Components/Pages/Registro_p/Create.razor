@page "/Prioridades/Create"
@page "/Prioridades/Create/{prioridadId:int}"
@inject PrioridadesServices prioridadesServices
@inject NavigationManager navigationManager
@rendermode InteractiveServer
@inject NotificationService notificationService

<EditForm Model="Prioridad" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />
    <div class="card shadow-lg border-0 rounded" style="background-color: #f8f9fa;">
        <div class="card-header bg-primary text-white" style="text-align: center;">
            <h3> <i class="fas fa-clipboard-list"></i> Registro de Prioridades</h3>
        </div>

        <div class="card-body">
            @* PrioridadId *@
            <div class="row">
                <div class="col-md-6 mb-3">
                    <label for="PrioridadId" class="form-label">ID de prioridad:</label>
                    <div class="input-group">
                        <div class="sizeid">
                            <InputNumber @bind-Value="Prioridad.PrioridadId" class="form-control" style="font-size: 0.8em;" aria-describedby="BotonBuscar" />
                        </div>
                    </div>
                </div>
            </div>

            @* Descripcion *@
            <div class="mb-3">
                <label for="Descripcion" class="form-label">Descripcion:</label>
                <InputText @bind-Value="Prioridad.Descripcion" class="form-control" />
                <ValidationMessage For="@(() => Prioridad.Descripcion)" />
            </div>

            @* Tiempo en minutos *@
            <div class="mb-3">
                <label for="Tiempo" class="form-label">Tiempo (en minutos):</label>
                <InputNumber @bind-Value="Prioridad.Tiempo" class="form-control" />
                <ValidationMessage For="@(() => Prioridad.Tiempo)" />
            </div>


        </div>

        <div class="card-footer bg-light d-flex justify-content-center mt-3">
            <div class="btn-group">
                <button type="button" class="btn btn-outline-primary ml-2" @onclick="Nuevo"><span class="bi bi-plus"></span> Nuevo </button>
                <button type="submit" class="btn btn-outline-success ml-2"><span class="bi bi-check-circle-fill"></span> Guardar </button>
                <a type="button" href="/Prioridades/Index" class="btn btn-outline-danger"><span class="bi bi-arrow-bar-left"></span> Retroceder </a>
            </div>
        </div>
    </div>
</EditForm>




@code {
    [Parameter]
    public int? prioridadId { get; set; }

    public Prioridades Prioridad { get; set; } = new Prioridades();

    private bool Existe = false;

    public async Task Buscar()
    {
        var prioridadEncontrada = await prioridadesServices.Buscar(Prioridad.PrioridadId);

        if (prioridadEncontrada != null)
        {
            Prioridad = prioridadEncontrada;
        }
        else
        {
            notificationService.ShowNotification(titulo: "Encontrado", mensaje: "La entrada se ha encontrado con exito", NotificationSeverity.Info);
        }

    }


    public void Nuevo()
    {
        Prioridad = new Prioridades();
        Existe = false;
    }

    public async Task Guardar()
    {
        var guardo = await prioridadesServices.Guardar(this.Prioridad);
        if (guardo != null)
        {
            notificationService.ShowNotification(titulo: "Guardado", mensaje: "Se a guardado correctamente", NotificationSeverity.Success);
        }
        else
        {
            notificationService.ShowNotification(titulo: "Error", mensaje: "Ocurrio un error al guardar", NotificationSeverity.Warning);
        }
        Nuevo();

    }

    public async Task Eliminar()
    {
        var eliminado = await prioridadesServices.Eliminar(Prioridad.PrioridadId);
        if (eliminado != null)
        {
            notificationService.ShowNotification(titulo: "Eliminado", mensaje: "Se a eliminado correctamente", NotificationSeverity.Success);
        }
        else
        {
            notificationService.ShowNotification(titulo: "Error", mensaje: "Ocurrio un error al eliminar", NotificationSeverity.Warning);
        }
        Nuevo();
    }

}