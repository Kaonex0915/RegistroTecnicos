@page "/Clientes/Edit/{clienteId:int}"
@inject ClientesServices clientesServices
@inject NavigationManager navigationManager
@rendermode InteractiveServer
@inject NotificationService notificationService

<EditForm Model="Cliente" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />
    <div class="card shadow-lg border-0 rounded" style="background-color: #f0f0fa;">
        <div class="card-header bg-primary text-white" style="text-align: center;">
            <h3> <i class="fas fa-clipboard-list"></i> Editar Cliente</h3>
        </div>

        <div class="card-body">

            <div class="row">

                <div class="col-md-6 mb-3">
                    <label for="ClienteId" class="form-label">ClienteId:</label>
                    <div class="input-group">
                        <div style="width: 40%; height: 1em;">
                            <InputNumber @bind-Value="Cliente.ClienteId" class="form-control" style="font-size: 0.8em;" aria-describedby="BotonBuscar" />
                        </div>
                    </div>
                </div>
            </div>

            <div class="mb-3">
                <label for="Nombres" class="form-label">Nombres:</label>
                <InputText @bind-Value="Cliente.Nombres" class="form-control" />
                <ValidationMessage For="@(() => Cliente.Nombres)" />
            </div>

            <div class="mb-3">
                <label for="WhatsApp" class="form-label">WhatsApp:</label>
                <InputNumber @bind-Value="Cliente.Whatsapp" class="form-control" />
                <ValidationMessage For="@(() => Cliente.Whatsapp)" />
            </div>

        </div>

        <div class="card-footer bg-light d-flex justify-content-center mt-3">
            <div class="btn-group">
                <button type="button" class="btn btn-outline-primary ml-2" @onclick="Nuevo"><span class="bi bi-plus"></span> Nuevo </button>
                <button type="submit" class="btn btn-outline-success ml-2"><span class="bi bi-check-circle-fill"></span> Guardar </button>
                <a type="button" href="/Index/" class="btn btn-outline-danger"><span class="bi bi-arrow-bar-left"></span> Retroceder </a>
            </div>
        </div>
    </div>
</EditForm>

@code {
    [Parameter]
    public int? clienteId { get; set; }

    public Clientes Cliente { get; set; } = new Clientes();
    private bool Existe = false;

    protected override async Task OnInitializedAsync()
    {
        if (clienteId.HasValue)
        {
            Cliente.ClienteId = clienteId.Value;
            await Buscar();
        }
    }

    public async Task Buscar()
    {
        var clienteEncontrado = await clientesServices.Buscar(Cliente.ClienteId);

        if (clienteEncontrado != null)
        {
            Cliente = clienteEncontrado;
        }
        else
        {
            notificationService.ShowNotification(titulo: "Encontrado", mensaje: "La entrada se ha encontrado con exito", NotificationSeverity.Info);
        }

    }


    public void Nuevo()
    {
        Cliente = new Clientes();
        Existe = false;
    }

    public async Task Guardar()
    {
        var guardo = await clientesServices.Guardar(this.Cliente);
        if (guardo != null)
        {
            notificationService.ShowNotification(titulo: "Guardado", mensaje: "Se a guardado correctamente", NotificationSeverity.Success);
        }
        else
        {
            notificationService.ShowNotification(titulo: "Error", mensaje: "Ocurrio un error al guardar", NotificationSeverity.Warning);
        }
        Nuevo();

    }

    public async Task Eliminar()
    {
        var eliminado = await clientesServices.Eliminar(Cliente.ClienteId);
        if (eliminado != null)
        {
            notificationService.ShowNotification(titulo: "Eliminado", mensaje: "Se a eliminado correctamente", NotificationSeverity.Success);
        }
        else
        {
            notificationService.ShowNotification(titulo: "Error", mensaje: "Ocurrio un error al eliminar", NotificationSeverity.Warning);
        }
        Nuevo();
    }

}