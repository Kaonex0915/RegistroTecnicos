@page "/Trabajos/Index"
@rendermode InteractiveServer
@inject TrabajosServices trabajosServices

<EditForm Model="ListaTrabajos" class="border shadow-lg p-3 rounded">

    <div class="card-header bg-primary text-white text-center py-2 rounded">
        <h3 style="font-weight: bold;" class="mb-0 font-weight-bold">Consulta Trabajos</h3>
    </div>
    <div class="card-body">

        <div class="row mb-3 align-items-end">
            <div class="col-md-3">
                <label for="Filtro" class="form-label">Filtrar por:</label>
                <select @bind="filtro" class="form-select">
                    <option value="id">ID</option>
                    <option value="Fecha">Fecha</option>
                    <option value="Descripcion">Descripcion</option>                    
                    <option value="Monto">Monto</option>
                    <option value="ClienteId">ClienteId</option>
                    <option value="TecnicoId">TecnicoId</option>
                </select>
            </div>
            <div class="col-md-6">
                <label for="ValorFiltro" class="form-label">Busqueda:</label>
                <div class="input-group">
                    <input @bind="valorFiltro" class="form-control" placeholder="Buscar" />
                    <button @onclick="Buscar" class="btn btn-outline-primary" type="button">
                        <span class="bi bi-search"></span> Buscar
                    </button>
                </div>
            </div>
            <div class="col-md-3 text-end">
                <a href="/Trabajos/Create" class="btn btn-success" type="button"><span class="bi bi-floppy"></span> Crear </a>
            </div>
        </div>
    </div>
    <table class="table table-bordered text-center">
        <thead class="bg-primary text-white">
            <tr>
                <th>Id de trabajo</th>
                <th>Fecha</th>
                <th>Descripcion</th>                
                <th>Monto</th>
                <th>ClienteId</th>
                <th>ID de Tecnico</th>
                <th>ID de la Prioridad</th>
                <th>Ver</th>
                <th>Editar</th>
                <th>Eliminar</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var trabajo in ListaTrabajos)
            {
                <tr>
                    <td>@trabajo.TrabajoId</td>
                    <td>@Trabajo.Fecha.ToString("dd/MM/yyyy")</td>
                    <td>@trabajo.Descripcion</td>                   
                    <td>@trabajo.Monto</td>
                    <td>@trabajo.ClienteId</td>
                    <td>@trabajo.TecnicoId</td>
                    <td>@trabajo.PrioridadId</td>

                    <td>
                        <a class="btn btn-outline-primary" href="/Trabajos/Detail/@trabajo.TrabajoId">
                            <span class="bi bi-card-heading fs-5"></span>
                        </a>
                    </td>

                    <td>
                        <a class="btn btn-outline-success" href="/Trabajos/Edit/@trabajo.TrabajoId">
                            <span class="bi bi-pencil fs-5"></span>
                        </a>
                    </td>

                    <td>
                        <a class="btn btn-rojo" href="/Trabajos/Delete/@trabajo.TrabajoId">
                            <span class="bi bi-trash fs-5"></span>
                        </a>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</EditForm>

@code {

        public Trabajos Trabajo = new Trabajos();

        public List<Trabajos> ListaTrabajos = new List<Trabajos>();
      
        private string filtro = "Id";
        private string valorFiltro = "";

        protected override async Task OnInitializedAsync()
        {
            ListaTrabajos = await trabajosServices.Listar(tr => true);
        }

        public async Task Guardar()
        {
            var guardo = await trabajosServices.Guardar(Trabajo);
        }

        private async Task Buscar()
        {
            if (valorFiltro.Trim() != "")
            {
                if (filtro == "id" && int.TryParse(valorFiltro, out int trabajoId))
                {
                    ListaTrabajos = await trabajosServices.Listar(tr => tr.TrabajoId == trabajoId);
                }
                else if (filtro == "Descripcion")
                {
                    ListaTrabajos = await trabajosServices.Listar(tr => tr.Descripcion == valorFiltro);
                }
                else if (filtro == "Monto" && int.TryParse(valorFiltro, out int Monto))
                {
                    ListaTrabajos = await trabajosServices.Listar(tr => tr.Monto == Monto);
                }
                else if (filtro == "ClienteId" && int.TryParse(valorFiltro, out int clienteId))
                {
                    ListaTrabajos = await trabajosServices.Listar(tr => tr.ClienteId == clienteId);
                }
                else if (filtro == "TecnicoId" && int.TryParse(valorFiltro, out int tecnicoId))
                {
                    ListaTrabajos = await trabajosServices.Listar(tr => tr.TecnicoId == tecnicoId);
                }
            else
            {
                ListaTrabajos = await trabajosServices.Listar(tr => true);
            }
        }

    }
}